#!/system/bin/sh

busybox=/sbin/busybox
fstrim=/sbin/fstrim
zipalign=/sbin/zipalign
trimhelper=/data/trimhelper

# powerHAL fix
if [ ! -e /system/lib/hw/power.tuna.so.bak ] ; then
  $busybox mount -o remount,rw /system
  $busybox mv /system/lib/hw/power.tuna.so /system/lib/hw/power.tuna.so.bak
  $busybox cp /sbin/power.tuna.so /system/lib/hw/
  $busybox chmod 644 /system/lib/hw/power.tuna.so
  $busybox mount -o remount,ro /system
fi

# FUSS
if [ ! -e /data/fuss ] ; then
  $busybox mkdir /data/fuss
  $busybox chown -R root.root /data/fuss
  $busybox chmod -R 755 /data/fuss
  $busybox cp /sbin/fuss /data/fuss/
  $busybox cp /sbin/reflash /data/fuss/
  $busybox chmod 755 /data/fuss/fuss
  $busybox chmod 755 /data/fuss/reflash
fi

if [ ! -e /system/bin/fuss ] ; then
  $busybox mount -o remount,rw /system
  $busybox ln -s /data/fuss/fuss /system/bin/fuss
  $busybox ln -s /data/fuss/reflash /system/bin/reflash
  $busybox mount -o remount,ro /system
fi

# init.d support
if [ ! -e /system/etc/init.d ] ; then
  $busybox mount -o remount,rw /system
  $busybox mkdir /system/etc/init.d
  $busybox chown -R root.root /system/etc/init.d
  $busybox chmod -R 755 /system/etc/init.d
  $busybox mount -o remount,ro /system
fi

if [ ! -e /system/bin/sysinit ] ; then
  $busybox run-parts /system/etc/init.d
fi

# workaround buggy busybox rmmod (required for wlan suspend drop workaround)
KERNEL_VERSION=$($busybox uname -r)
if [ ! -e /system/lib/modules/$KERNEL_VERSION ] ; then
  $busybox mount -o remount,rw /system
  if [ ! -e /system/lib/modules ] ; then
    $busybox mkdir /system/lib/modules
  fi
  $busybox rmdir `$busybox find /system/lib/modules -name '*fancy*'`
  $busybox mkdir /system/lib/modules/$KERNEL_VERSION
  $busybox chown -R root.root /system/lib/modules/$KERNEL_VERSION
  $busybox chmod -R 644 /system/lib/modules/$KERNEL_VERSION
  $busybox mount -o remount,ro /system
fi

# symlink for WiFi drop workaround
if [ ! -e /system/bin/fixwifi ] ; then
  $busybox mount -o remount,rw /system
  $busybox ln -s /sbin/wifi_drop_wa /system/bin/fixwifi
  $busybox mount -o remount,ro /system
fi

# initialize suspend trim helper

if [ -e /data/trimhelper ] ; then
  $busybox sed -i "1s/.*/$($busybox date +%s)/" $trimhelper
else
  $busybox date +%s > $trimhelper
  $busybox echo 0 >> $trimhelper
fi

# zipalign apks
LOG_FILE=/data/zipalign.log
ZIPALIGNDB=/data/zipalign.db

if [ -e $LOG_FILE ] ; then
  $busybox rm $LOG_FILE
fi

if [ ! -f $ZIPALIGNDB ] ; then
  $busybox touch $ZIPALIGNDB
fi

$busybox echo "Starting FV Automatic ZipAlign $( date +"%m-%d-%Y %H:%M:%S" )" | $busybox tee -a $LOG_FILE

for DIR in /system/app /data/app ; do
  cd $DIR
  for APK in *.apk ; do
    if [ $APK -ot $ZIPALIGNDB ] && [ $($busybox grep "$DIR/$APK" $ZIPALIGNDB|$busybox wc -l) -gt 0 ] ; then
      $busybox echo "Already checked: $DIR/$APK" | $busybox tee -a $LOG_FILE
    else
      $zipalign -c 4 $APK
      if [ $? -eq 0 ] ; then
        $busybox echo "Already aligned: $DIR/$APK" | $busybox tee -a $LOG_FILE
        $busybox grep "$DIR/$APK" $ZIPALIGNDB > /dev/null || $busybox echo $DIR/$APK >> $ZIPALIGNDB
      else
        $busybox echo "Now aligning: $DIR/$APK" | $busybox tee -a $LOG_FILE
        $zipalign -f 4 $APK /cache/$APK
        $busybox mount -o rw,remount /system
        $busybox cp -f -p /cache/$APK $APK
	$busybox chmod 644 $APK
        $busybox rm -f /cache/$APK
        $busybox grep "$DIR/$APK" $ZIPALIGNDB > /dev/null || $busybox echo $DIR/$APK >> $ZIPALIGNDB
      fi
    fi
  done
done

$busybox mount -o ro,remount /system
$busybox touch $ZIPALIGNDB
$busybox echo "Automatic ZipAlign finished at $( date +"%m-%d-%Y %H:%M:%S" )" | $busybox tee -a $LOG_FILE

# trim file system if wipes have been performed
if [ ! -e /cache/trimmed ] ; then
  $fstrim /cache
  $busybox touch /cache/trimmed
fi

if [ ! -e /data/dalvik-cache/trimmed ] ; then
  $busybox mount -o remount,nodiscard /data
  $fstrim /data
  $busybox mount -o remount,discard /data
  $busybox touch /data/dalvik-cache/trimmed
fi

# change some processes' cgroups and priorities
until [ $($busybox pgrep com.android.systemui) ] ; do
  $busybox sleep 1
done

$busybox mkdir /dev/cpuctl/apps/kswapd
$busybox chown system system /dev/cpuctl/apps/kswapd/tasks
$busybox chmod 0660 /dev/cpuctl/apps/kswapd/tasks

$busybox echo 91 > /dev/cpuctl/apps/bg_non_interactive/cpu.shares
$busybox echo 400000 > /dev/cpuctl/apps/bg_non_interactive/cpu.rt_runtime_us
$busybox echo 832 > /dev/cpuctl/apps/kswapd/cpu.shares
$busybox echo 400000 > /dev/cpuctl/apps/kswapd/cpu.rt_runtime_us 
$busybox echo 1000000 > /dev/cpuctl/apps/kswapd/cpu.rt_period_us

$busybox renice -18 $($busybox pgrep com.android.systemui)
$busybox renice -10 $($busybox pgrep kblockd)
$busybox renice 10 $($busybox pgrep kswapd)

$busybox echo $($busybox pgrep com.android.systemui) > /dev/cpuctl/tasks
$busybox echo $($busybox pgrep kswapd) > /dev/cpuctl/apps/kswapd/tasks

# wifi module
$busybox insmod /sbin/bcmdhd.ko firmware_path=/system/vendor/firmware/fw_bcmdhd.bin nvram_path=/system/etc/wifi/bcmdhd.cal

# disable swappiness if zram is not active
$busybox sleep 20
swapsize=$($busybox free | $busybox grep -i swap | $busybox awk '{print $2}')

if [ $swapsize -eq 0 ] ; then
  $busybox echo 0 > /proc/sys/vm/swappiness
fi

# low memory killer whitelist for common launchers
list="com.cyanogenmod.trebuchet com.android.launcher org.adw.launcher org.adwfreak.launcher com.anddoes.launcher com.gau.go.launcherex com.mobint.hololauncher com.mobint.hololauncher.hd com.teslacoilsw.launcher org.zeam com.chrislacy.actionlauncher.pro com.android.lmt com.tsf.shell"

for class in $list ; do
  if [ $($busybox pgrep $class) ] ; then
    pid=$($busybox pgrep $class)
    until [ -e /proc/$pid ] ; do
      $busybox sleep 1
    done
    $busybox echo -17 > /proc/$pid/oom_adj
    $busybox chmod 100 /proc/$pid/oom_adj
    break
  fi
done
